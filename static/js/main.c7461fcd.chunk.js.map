{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","React","memo","movies","map","imdbId","FindMovie","onAdd","useState","query","setQuery","searchResponse","setSearchResponse","isLoading","setIsLoading","searchError","setSearchError","isSubmitted","setIsSubmitted","getCurrentMovie","useCallback","foundedMovie","Title","Plot","imdbID","Poster","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","response","finally","htmlFor","type","value","onChange","target","id","placeholder","cn","disabled","onClick","App","setMovies","onMovieAdd","some","savedMovie","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7461fcd.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = React.memo(\n  ({ movies }) => (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbId}\n          movie={movie}\n        />\n      ))}\n    </div>\n  ),\n);\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const FindMovie: React.FC<Props> = React.memo(\n  ({ onAdd }) => {\n    const [query, setQuery] = useState('');\n    // eslint-disable-next-line max-len\n    const [searchResponse, setSearchResponse] = useState<MovieData | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchError, setSearchError] = useState(false);\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    const onSubmitHandler = (event: React.FormEvent) => {\n      event.preventDefault();\n      setIsLoading(true);\n\n      getMovie(query)\n        .then((response) => {\n          if ((response as MovieData).Title) {\n            setSearchResponse(response as MovieData);\n            setIsSubmitted(true);\n\n            return;\n          }\n\n          setSearchError(true);\n        }).finally(() => setIsLoading(false));\n    };\n\n    const onClear = () => {\n      setQuery('');\n      setSearchError(false);\n      setIsSubmitted(false);\n      setSearchResponse(null);\n    };\n\n    const queryHandler = (event: ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n      setSearchError(false);\n      setIsSubmitted(false);\n      setSearchResponse(null);\n    };\n\n    const getCurrentMovie = useCallback((foundedMovie) => {\n      return {\n        title: foundedMovie.Title,\n        description: foundedMovie.Plot,\n        imdbId: foundedMovie.imdbID,\n        imgUrl: foundedMovie.Poster !== 'N/A'\n          ? foundedMovie.Poster\n          : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n        imdbUrl: `https://www.imdb.com/title/${foundedMovie.imdbID}`,\n      };\n    }, [searchResponse]);\n\n    const addButtonHandler = () => {\n      onAdd(getCurrentMovie(searchResponse));\n      onClear();\n    };\n\n    return (\n      <>\n        <form\n          className=\"find-movie\"\n          onSubmit={onSubmitHandler}\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"movie-title\">\n              Movie title\n            </label>\n\n            <div className=\"control\">\n              <input\n                data-cy=\"titleField\"\n                type=\"text\"\n                value={query}\n                onChange={queryHandler}\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className=\"input is-dander\"\n              />\n            </div>\n\n            { searchError && (\n              <p className=\"help is-danger\" data-cy=\"errorMessage\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                data-cy=\"searchButton\"\n                type=\"submit\"\n                className={cn(\n                  'button is-light',\n                  { 'is-loading': isLoading },\n                )}\n                disabled={(!query)}\n              >\n                Find a movie\n              </button>\n            </div>\n\n            {searchResponse && (\n              <div className=\"control\">\n                <button\n                  data-cy=\"addButton\"\n                  type=\"button\"\n                  className=\"button is-primary\"\n                  onClick={addButtonHandler}\n                >\n                  Add to the list\n                </button>\n              </div>\n            )}\n          </div>\n        </form>\n        {(isSubmitted && !isLoading) && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={getCurrentMovie(searchResponse)} />\n          </div>\n        )}\n      </>\n    );\n  },\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=d25e8d1c';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onMovieAdd = useCallback((movie: Movie) => {\n    if (movies.some(savedMovie => movie.imdbId === savedMovie.imdbId)) {\n      return;\n    }\n\n    setMovies((prev) => [...prev, movie]);\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onAdd={onMovieAdd}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}